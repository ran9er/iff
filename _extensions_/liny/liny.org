#+STARTUP: overview
#+SEQ_TODO: TODO(t) WAIT(w) | DONE(d!) CANCELED(c@)
#+COLUMNS: %10ITEM  %10PRIORITY %15TODO %65TAGS

* todo list
** TODO field default prompt
** DONE 中文分词
   CLOSED: [2013-04-11 Thu 23:20]
   - State "DONE"       from "WAIT"       [2013-04-11 Thu 23:20]
** DONE debug: two field close in
   CLOSED: [2013-04-11 Thu 23:21]
   - State "DONE"       from "TODO"       [2013-04-11 Thu 23:21]
** DONE more env test
   CLOSED: [2013-04-11 Thu 23:21]
   - State "DONE"       from "TODO"       [2013-04-11 Thu 23:21]
** CANCELED local env test of snippet
   CLOSED: [2013-03-28 Thu 21:18]
   - State "CANCELED"   from "TODO"       [2013-03-28 Thu 21:18] \\
     execute the env-test in keywords only.
** DONE expand template
   CLOSED: [2013-04-11 Thu 23:21]
   - State "DONE"       from "TODO"       [2013-04-11 Thu 23:21]
** DONE indent
   CLOSED: [2013-04-11 Thu 23:21]
   - State "DONE"       from "TODO"       [2013-04-11 Thu 23:21]
** TODO escape for $
** DONE quick snippets file interface
   CLOSED: [2013-03-29 Fri 15:47]
   - State "DONE"       from "TODO"       [2013-03-29 Fri 15:47]
** DONE multi snippet choice
   CLOSED: [2013-03-28 Thu 20:27]
   - State "DONE"       from ""           [2013-03-28 Thu 20:27]

smart-match
  let ...
  setq liny-smart-match-list files
  ...

prev-field
  choice snippets
  delete-region clear-instance
  liny-insert (nth 1 liny-smart-match-list)
  ...sort liny-smart-match-list

** DONE relay
   CLOSED: [2013-03-28 Thu 20:27]
   - State "DONE"       from ""           [2013-03-28 Thu 20:27]
** CANCELED liny-enable-indent
   CLOSED: [2013-03-28 Thu 21:10]
   - State "CANCELED"   from ""           [2013-03-28 Thu 21:10] \\
     mov to indent
** snippet-ready hook
** CANCELED auto complete
   CLOSED: [2013-03-28 Thu 20:28]
   - State "CANCELED"   from "TODO"       [2013-03-28 Thu 20:28]
   - State "CANCELED"   from ""           [2013-03-28 Thu 20:27]
** CANCELED l-snippets interface for ac
   CLOSED: [2013-03-28 Thu 20:28]
   - State "CANCELED"   from ""           [2013-03-28 Thu 20:28]
** DONE debug Recursive (l-snippets-insert str t)
   CLOSED: [2013-03-28 Thu 20:28]
   - State "DONE"       from ""           [2013-03-28 Thu 20:28]
** DONE emacs 24.3
   CLOSED: [2013-03-28 Thu 20:28]
   - State "DONE"       from ""           [2013-03-28 Thu 20:28]
** DONE 智能匹配
   CLOSED: [2013-03-28 Thu 20:28]
   - State "DONE"       from ""           [2013-03-28 Thu 20:28]
模式 环境 上下文
** DONE 动态插入 模板扩展
   CLOSED: [2013-04-11 Thu 23:21]
   - State "DONE"       from "TODO"       [2013-04-11 Thu 23:21]
界定符 %
keymap
syntax-delimiter
role => major => + (ext . nil)
l-snippets-syntax-delimiter => +
  "%" (lambda (s p o l)
        addto o (ext . s)
              o (modification-hooks ext-major)
        )
ext-major (if (eq last-command o.ext)
           appoint o1 'major (gethash cache snippet id)
           insert o1 l
file => def ${% }
** WAIT 清理正则表达式
(l-snippets-gen-regexp "\\(%s\\)\\|\\(%s\\)" id open)
l-snippets-token-regexp sep
"\\([[:digit:]]+\\)\\|\\({\\)"

l-snippets-token-regexp-open
l-snippets-token-regexp leader
"\\(\\${\\)\\|\\(\\$[[:digit:]]+\\)"

(plist-get l-snippets-syntax-meta 'open)
l-snippets-token-regexp open
"{"

(plist-get l-snippets-syntax-meta 'head)
(l-snippets-token-regexp 'head)

(plist-get l-snippets-syntax-meta 'close)
l-snippets-token-regexp close
"}"

(plist-get l-snippets-syntax-meta 'id)
l-snippets-token-regexp id
"[[:digit:]]+"

(l-snippets-token-regexp-delimiter)
"\\(%\\)\\|\\(:\\)\\|\\(\\$\\)"

(length l-snippets-syntax-delimiter)
(length (l-snippets-token-delimiter))

l-snippets-syntax-delimiter
(l-snippets-token-delimiter)

** CANCELED load-file-name => file-name
   CLOSED: [2013-03-28 Thu 20:28]
   - State "CANCELED"   from ""           [2013-03-28 Thu 20:28] \\
     .....
** DONE l-snippets-clear-instance
   CLOSED: [2013-03-28 Thu 20:29]
   - State "DONE"       from ""           [2013-03-28 Thu 20:29]
** DONE l-snippets-gen-token l-snippets-read-file => l-snippets-gen-token
   CLOSED: [2013-03-28 Thu 20:29]
   - State "DONE"       from ""           [2013-03-28 Thu 20:29]
(defun l-snippets-gen-token (file &optional regexp)
  (let ((regexp l-snippets-token-regexp-open)
        beg mid end result)
    (with-temp-buffer
      (when (file-readable-p file)
        (insert-file-contents file nil nil nil t)
        (setq end (point-max))
        (goto-char end)
        (while (re-search-backward regexp nil t)
          (setq
           beg
           (match-beginning 0)
           mid
           (if (match-beginning 1)
               (cdr (l-snippets-find-close-paren
                     (plist-get l-snippets-syntax-meta 'open)
                     (plist-get l-snippets-syntax-meta 'close)))
             (match-end 2))
           result
           (cons
            (l-snippets-prase-token
             (buffer-substring-no-properties beg mid))
            (cons
             (buffer-substring-no-properties mid end)
             result))
           end
           beg))
        (if (eq beg (point-min))
            result
          (setq
           result
           (cons
            (substring-no-properties (point-min) beg)
            result)))))))
** DONE keymap 反射机制
   CLOSED: [2013-03-28 Thu 20:29]
   - State "DONE"       from ""           [2013-03-28 Thu 20:29]
X 获取当前 overlay
l-snippets-previous-field l-snippets-next-field 处理边界情况（跳至下一组）
** WAIT 检查字符串处理函数
*** split-str
*** (l-snippets-fetch-str "${123as{ }{ }{ }{ }fd}")
** DONE 抽象  roles (l-snippets-insert)
   CLOSED: [2013-03-28 Thu 20:30]
   - State "DONE"       from ""           [2013-03-28 Thu 20:30]
** DONE 文件格式
   CLOSED: [2013-03-28 Thu 20:30]
   - State "DONE"       from ""           [2013-03-28 Thu 20:30]
------
describe
------
文件描述
  作者 邮箱……
------
environment
------
文件变量
表达式
------
keyword
------
关键词 供智能匹配
------
snippet
------
snippet ……


** WAIT M-w copy-things
* 扩展
** l-snippets-syntax-file
** l-snippets-syntax-meta
** l-snippets-syntax-delimiter
** l-snippets-keymap
** l-snippets-roles
** l-snippets-match-strategy
* 介绍
** 名字
暂时没想好，L 有 lite 之意，主要指体积小巧……当然，我会尽可能的保证其速度
linY is not Yasnippet
** 特性
*** [ ] 动态插入 模板扩展
可选字段，不定长字段(动态生成field；分隔符，镜像分隔符)
通过插件系统扩展
*** [X] 按需加载
*** [ ] 嵌套 snippets （按缩进）
**** 清除 overlays
*** [ ] 自动缩进/原格式
**** l-snippets-insert-str
*** [ ] 智能匹配
**** 关键词
*** 游标角色
* expand
** fetch-word
** clear-region
** match
*** smart strict
** insert
*** xxx
*** insert-str

* l-snippets-get-token
** l-snippets-gen-token
*** l-snippets-prase-token
**** l-snippets-fetch-str
**** l-snippets-split-str

* 随录
** l-snippets-split-str
原始版本，
(defun l-snippets-split-str (str &optional sep)
  (let* ((sep (or sep l-snippets-token-regexp-delimiter))
         (lst l-snippets-syntax-delimiter)
         (elt (l-snippets-make-lst (length lst)))
         k result)
    (with-temp-buffer
      (insert str)
      (goto-char (point-min))
      (while (re-search-forward sep nil t)
        (mapcar
         (lambda(x)
           (if (match-end x)
               (let ((m (cons
                         (match-beginning x)
                         (match-end x)))
                     (n (nth 1 (nth (1- x) lst))))
                 (setq result
                       (cons
                        (cons n m)
                        result)))))
         elt))
      (setq result (reverse result))
      (mapcar
       (lambda(x)
         (cons
          (car x)
          (buffer-substring-no-properties
           (cdr (cdr x))
           (or
            (car (cdr (car (cdr (member x result)))))
            (point-max)))))
       result))))
** (overlay-put o 'tail (l-snippets-overlay-appoint 'tail p (1+ p) 'owner o))
(overlay-put o 'tail (l-snippets-overlay-appoint 'tail (overlay-end o)(1+ (overlay-end o)) 'owner o))

** l-snippets-gen-token
开始时是先序遍历，有点复杂；后来为了好看，改成后序遍历……
结果现在实现模板扩展时，为了实现嵌套定义snippet，发现后序遍历不给力
还得改回来
* history
增加快速访问 snippet 的接口

增加了符合条件的多个snippet切换功能，如果一个 alias 有多个符合条件的 snippet，比如前面提到的两种for，可以 liny-expand-maybe 轮流切换

改进了智能匹配的环境测试部分，现在是按snippet中定义的关键词来测试，而不是把 env-test 表中的所有测试执行一遍……可以放心大胆的增加测试条件了
